
import asyncio
import hashlib
import random
import aiohttp
from bs4 import BeautifulSoup
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import CHECK_INTERVAL, ADMIN_CHAT_ID, CHANNEL_ID

# --- FSM –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É ---
class EditNewsText(StatesGroup):
    waiting_for_text = State()

# –ß–µ—Ä–≥–∏ —ñ —Å—Ö–æ–≤–∏—â–µ
pending_news = {}
seen_links = set()
admin_queue = asyncio.Queue()
channel_queue = asyncio.Queue()

# –î–µ—Ñ–æ–ª—Ç–Ω—ñ URL (—Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
DEFAULT_IMAGES = [
    "https://images.unsplash.com/photo-1495521821757-a1efb6729352?w=800",
    "https://images.unsplash.com/photo-1557408172-e596b84ad1b3?w=800",
    "https://images.unsplash.com/photo-1552664730-d307ca884978?w=800",
    "https://images.unsplash.com/photo-1559027615-cd1628902df4?w=800",
    "https://images.unsplash.com/photo-1491841573634-28fb1df7d93f?w=800",
]

THEME_IMAGES = {
    "–≤—ñ–π–Ω–∞": [
        "https://images.unsplash.com/photo-1578070221651-94e7f47b1f9f?w=800",
        "https://images.unsplash.com/photo-1535083783855-76ae62b2914e?w=800"
    ],
    "—Å–ø–æ—Ä—Ç": [
        "https://images.unsplash.com/photo-1552664730-d307ca884978?w=800",
        "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=800"
    ],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥": [
        "https://images.unsplash.com/photo-1557408172-e596b84ad1b3?w=800",
        "https://images.unsplash.com/photo-1625948515291-69613efd103f?w=800"
    ],
    "–ø–æ–ª—ñ—Ç–∏–∫": [
        "https://images.unsplash.com/photo-1559027615-cd1628902df4?w=800",
        "https://images.unsplash.com/photo-1552664730-d307ca884978?w=800"
    ],
    "–µ–∫–æ–Ω–æ–º": [
        "https://images.unsplash.com/photo-1526374965328-7f5ae4e8e42e?w=800",
        "https://images.unsplash.com/photo-1611974260368-63fe0a9d0c1b?w=800"
    ],
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è bot (–±—É–¥–µ–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑ run.py)
global_bot: Bot = None


def set_bot(bot: Bot):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π bot –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    global global_bot
    global_bot = bot


def get_emoji(title: str) -> str:
    """–í–∏–±–∏—Ä–∞—î –µ–º–æ–¥–∑—ñ –∑–∞ —Ç–µ–º–æ—é"""
    t = title.lower()
    if any(w in t for w in ["–µ–∫–æ–Ω–æ–º", "—Ñ—ñ–Ω–∞–Ω—Å", "–≤–∞–ª—é—Ç", "—Ä–∏–Ω–æ–∫", "–±—ñ–∑–Ω–µ—Å"]):
        return "üìä"
    if any(w in t for w in ["–ø–æ–ª—ñ—Ç–∏–∫", "–≤–ª–∞–¥–∞", "–∑–∞–∫–æ–Ω", "–ø–∞—Ä–ª–∞–º–µ–Ω—Ç"]):
        return "üèõ"
    if any(w in t for w in ["–≤—ñ–π–Ω–∞", "–∑—Å—É", "–∞—Ä–º—ñ—è", "–æ–±—Å—Ç—Ä—ñ–ª"]):
        return "ü™ñ"
    if any(w in t for w in ["—Å–ø–æ—Ä—Ç", "–º–∞—Ç—á", "—á–µ–º–ø—ñ–æ–Ω"]):
        return "‚öΩÔ∏è"
    if any(w in t for w in ["—Ç–µ—Ö–Ω–æ–ª–æ–≥", "–∞–π—Ç—ñ", "—Ä–æ–±–æ—Ç", "—ñ–Ω–Ω–æ–≤–∞—Ü"]):
        return "üíª"
    return "üì∞"


async def extract_image_from_article(html: str) -> str | None:
    """–í–∏—Ç—è–≥—É—î –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ HTML —Å—Ç–∞—Ç—Ç—ñ"""
    try:
        soup = BeautifulSoup(html, "html.parser")
        
        og_image = soup.find("meta", property="og:image")
        if og_image and og_image.get("content"):
            return og_image["content"]
        
        twitter_image = soup.find("meta", property="twitter:image")
        if twitter_image and twitter_image.get("content"):
            return twitter_image["content"]
        
        article = soup.find(["article", "div"], class_=lambda x: x and any(c in x.lower() for c in ["article", "post", "content", "news"]))
        if article:
            img = article.find("img")
            if img and img.get("src"):
                return img["src"]
        
        img = soup.find("img", src=True)
        if img:
            src = img["src"]
            if any(x in src.lower() for x in ["logo", "icon", "avatar", "16x16", "32x32"]):
                return None
            return src
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
    
    return None


async def validate_image_url(url: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞"""
    if not url:
        return False
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.head(url, timeout=aiohttp.ClientTimeout(total=5), ssl=False) as resp:
                return resp.status == 200
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏ {url}: {e}")
        return False


async def get_image_for_news(news: dict) -> str:
    """
    –ù–∞–º–∞–≥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏–Ω–∏:
    1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ–ª–µ 'image' –∑ RSS
    2. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–æ ‚Äî –≤–∏—Ç—è–≥—É—î –∑ text (HTML)
    3. –ü–æ—Ç—ñ–º ‚Äî —Ç–µ–º–∞—Ç–∏—á–Ω–µ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    4. –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤–µ –¥–µ—Ñ–æ–ª—Ç–Ω–µ
    """
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 1: –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ RSS —Ñ—ñ–¥—É
    if news.get("image"):
        if await validate_image_url(news["image"]):
            print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ RSS: {news['image'][:50]}...")
            return news["image"]
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 2: –í–∏—Ç—è–≥ –∑ HTML
    if "text" in news:
        extracted_url = await extract_image_from_article(news["text"])
        if extracted_url and await validate_image_url(extracted_url):
            print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏—Ç—è–≥–Ω–µ–Ω–µ –∑ text: {extracted_url[:50]}...")
            return extracted_url
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 3: –¢–µ–º–∞—Ç–∏—á–Ω–µ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    title = news.get("title", "").lower()
    for key, imgs in THEME_IMAGES.items():
        if key in title:
            return random.choice(imgs)
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 4: –î–µ—Ñ–æ–ª—Ç–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ
    return random.choice(DEFAULT_IMAGES)


async def send_news(bot: Bot, chat_id: int, title: str, text: str, reply_markup=None, image_url: str = None):
    """–ù–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–∏–Ω—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é"""
    emoji = get_emoji(title)
    clean_text = BeautifulSoup(text, "html.parser").get_text()
    caption_title = f"{emoji} <b>{title}</b>"

    try:
        if image_url:
            try:
                if len(caption_title + "\n\n" + clean_text) <= 1024:
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=image_url,
                        caption=f"{caption_title}\n\n{clean_text}",
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                else:
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=image_url,
                        caption=caption_title,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id=chat_id, text=clean_text, parse_mode="HTML")

                await asyncio.sleep(random.uniform(10, 20))
                return

            except (TelegramBadRequest, Exception) as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç...")
        
        await bot.send_message(
            chat_id=chat_id,
            text=f"{caption_title}\n\n{clean_text}",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        await asyncio.sleep(random.uniform(10, 20))

    except TelegramRetryAfter as e:
        await asyncio.sleep(getattr(e, "retry_after", 30))
        return await send_news(bot, chat_id, title, text, reply_markup, image_url)


def hash_link(link: str) -> str:
    return hashlib.sha1(link.encode()).hexdigest()[:10]


# --- –í–æ—Ä–∫–µ—Ä–∏ ---
async def news_fetcher():
    from news_scraper import get_latest_news
    while True:
        try:
            news_list = get_latest_news(seen_links)
            for news in news_list:
                news_hash = hash_link(news["link"])
                pending_news[news_hash] = news
                await admin_queue.put(news_hash)
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ news_fetcher: {e}")
        await asyncio.sleep(CHECK_INTERVAL)


async def admin_worker(bot: Bot):
    while True:
        news_hash = await admin_queue.get()
        news = pending_news.get(news_hash)
        if not news:
            admin_queue.task_done()
            continue

        clean_text = BeautifulSoup(news["text"], "html.parser").get_text()
        image_url = await get_image_for_news(news)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{news_hash}")],
            [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{news_hash}"),
             InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_{news_hash}")]
        ])
        await send_news(bot, chat_id=ADMIN_CHAT_ID, title=news["title"], text=clean_text, reply_markup=keyboard, image_url=image_url)
        admin_queue.task_done()


async def channel_worker(bot: Bot):
    while True:
        news_hash = await channel_queue.get()
        news = pending_news.get(news_hash)
        if not news:
            channel_queue.task_done()
            continue

        clean_text = BeautifulSoup(news["text"], "html.parser").get_text()
        image_url = await get_image_for_news(news)
        await send_news(bot, chat_id=CHANNEL_ID, title=news["title"], text=clean_text, image_url=image_url)
        channel_queue.task_done()


async def publish_to_channel(news_hash: str):
    await channel_queue.put(news_hash)


# --- –•–µ–Ω–¥–ª–µ—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
async def edit_text_callback_handler(bot: Bot, query: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    news_hash = query.data.replace("edit_", "")
    news = pending_news.get(news_hash)
    if not news:
        await query.answer("–ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ ‚ùå")
        return

    clean_text = BeautifulSoup(news["text"], "html.parser").get_text()
    await query.message.answer(
        text=f"–†–µ–¥–∞–≥—É–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–∏–Ω–∏:\n\n<b>{news['title']}</b>\n\n–ü–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{clean_text}",
        parse_mode="HTML"
    )

    await state.update_data(news_hash=news_hash)
    await state.set_state(EditNewsText.waiting_for_text)
    await query.answer()


async def updated_text_handler(message: Message, state: FSMContext, bot: Bot):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
    data = await state.get_data()
    news_hash = data.get("news_hash")
    
    if not news_hash or news_hash not in pending_news:
        await message.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç —É –Ω–æ–≤–∏–Ω—ñ
    pending_news[news_hash]["text"] = message.text
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –Ω–æ–≤–∏–Ω—É –∞–¥–º—ñ–Ω—É
    image_url = await get_image_for_news(pending_news[news_hash])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{news_hash}"),
         InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_{news_hash}")]
    ])
    await send_news(
        bot=bot,
        chat_id=ADMIN_CHAT_ID,
        title=pending_news[news_hash]["title"],
        text=pending_news[news_hash]["text"],
        reply_markup=keyboard,
        image_url=image_url
    )
    
    await state.clear()